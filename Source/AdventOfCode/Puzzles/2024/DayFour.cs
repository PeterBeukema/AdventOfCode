using System.Text.RegularExpressions;

namespace AdventOfCode.Puzzles._2024;

public class DayFour : DailyPuzzle
{
    private const string Data = "SSSMXMMSMMXXXSMXMASXSAXXMSXSMSXMMSSMMMSMAMXMASASXSXMMSXXXMAXSMSXMAMSAMXMSMAMSAMAMMXSAMXMMSAMMMMSMMMSMMXMMSSMMXSMAMMAAMAMXSSXXXAMXXXSASMSSSSS\nMAASXMASAMXMXMMMXMMMSSMAXSAMXSAXMASAAAXMAAMMAAASMSAMSMAMSMMMXXXAMMMXMXMXAMAMAXMAXXAMXMAMXMAMAASXMAAAMXAMXAAXSAASASXMSMSXMXMASXSASMMMAMAAAAAA\nMSMMMMMSMMAAAAAMASAMMAXXXMAMASXMMXSXMMSSSSXMXMMMASAMXMAMAAASXSXMMSXAAAMSMSAXMMMSSMASASMSSSSMSXSASMSSXXASMXSMMMXMXMAAMXMASAMXMAXASXAMAMMMMMMM\nAAAXAAASXSXSMSASASAXXAMXMSAMXSSMSMMXSXAAAMXMAMASXSAMXSASMSMSAMXMAXSXMAXAAXAMXAMAAXMMMSAAAAXAMASAMXAAASAMMXXAMXAMSXMMMASMMASXMMMAMXXMXSXXXAMX\nSXSSMSXSAMAMXXXMMSASAMXAXAASAMXSAMXAXAMSMMASASASXMAMASASAMXMXMAMMXAMXSSMXMSASMMSSMXMXXMMMMMAMMMMMMMSMAAXSASAMMSXSAAMSAMASAMAAXMSMSSMSMMMSMMX\nAAXMAMXMXMAMMSAXAMASMASMSSSMASXAXMXXSXXAASXMASAMMMSMASASMMSSSSXSXSASAMAASAMMSAAAAMAMXXXXMAMXSMXSAMXXXMAXMASMMAXASAMMMXSXMASMMMSAMAAMSAAMASXM\nMAMSASAMAMXSAMXMXSAMXMAXXMAXXMAXSMXAMMXSXMXMMMMMAMAAMMXMAAAXAMXAASAMXMMMAAMXMMMMSSXSXXSSSXSASXAMAMASAXMSMXMAMAMAMAMXMASASAMXAMXASXXMMSMSASXA\nAXMMMMAMXAAMASAMXMASXSMSSSMSMSMAAAXXMAAXAMASAAASXMXXMAMSMMSSSMSSXMXMSXMSMSSSXXXAXMXMMXSAAAMAMMMMXMMSMMMAMXSAMSMMMAMAMASXMXASXSMMMAMMXMXMAMMM\nSXMAMSSMMMXSMMXMAMXMXASAAXAAMAMXAMXMMSXSASAXASMSXMSXMXAAXMAAAMAMXMXAXAXXXXAMAMAMMMMSASMMMXMAMAXSMSASAXMAXXMXSMAMSMSAMXSXMXMMMSMSAMSMAMXSMMXS\nXASAMAMXXMAMXMSSXSASXMMMMMXMSXMXMMXSAAMSAMMSAAMXAAMAMXSMSSMSMMSSSMASMXMMAMMMXMASAMMMXSAXXXXXXMSAAMASASMSMXXMAXAMAMAMXAMAMXAAAMASMMAXASXXAMAA\nSXSASMMMSSMMSMMAASAMAXSASAXMXXMAAAAMAMXMXMXAMMSSMMSMMAXMAXXXAAXAAXAXMAMAAXAAASXSXSAMXSXMXSXSMXMMSMXMAMAAXSXSXSXSXSMAMMSASMSMSMAMASXSXSAMMMMS\nSASXMXAAMAXMAAMMMMXSXMSAMASMAASMMMSSSMXSAMXMSAXXMMAAAXSXSXMXMMMSMMMXSAMSMSSSXSXSASMSMSXMXSAAMSXXAMMMSMMMMXAXAMAMAMXXXMSAXAAAXMASXMXXAXMASAXA\nMAMXMMMMSAMSSSMMXSAMXXMAMSMMMMXSAAAAAMAMAMXXMMXSASMSMSSMMASXAAAAAAAAXXMAXXXMASXMAMAMAMMMAMSMMSMSMSASAMMAMMMMMMAMAMSSMMMXMSMSMMMSAMXMMMXXSASA\nMAMAMXMAMAMXAAXMAMASAXMAMXAXSXASMMMMMMASAMXAAXAXMAXAXAMAMAMSSMSSSMSSMMSMXMMMAMXSMMXMAAAXXXAMXXAAASXMAMSASAAAXSXSMSAXAAAMXXMAXXASAMAMSASMMMMM\nSASAMASASAMMMMMMASXMMSSMXSAMXMMXSAXXXSASASAMXMMSXMMMMMSSMAMAMXAMAMAMXXASAAXMASMSAXXSMSSSMXSMMMSMMMMSSMSASXSSMMASXMMSSMSMSAMMMMMMAMAXAAXXAXAX\nSXSMSMSXSXMSASXSAXAAAMAAXMSMXASASXSMAMAMAMXMASAAMXASAMAXSAMAMAMSXMASXSASMSXSXMAXMMMAAXAAXAMAMAMMXMXAMXMAMMMMAXAMAAXMAMAASAMAXAAXMMMSMMMSXSXS\nSXMAAAMAMXXXAXAMASXMXMAMXXAXXSMASAAMXMAMXMMSAMSSXSXXASMMSMSMSSXMMSASXMXMXXAXAMAMSMSASMMMMXMAMXSMAMMMSAMAMXASXMAMAMXXMMSMSMMMSMSAAAAAMXAMAXAM\nMAMSMSMMSSSMSMAMMMAAAMSXSSMSXXMAMMMXXMASXAAMMMAXMXXSMMXAMXMAMMASAMMSMSASAMMMMMXSAAXMMAAMXSXSSMXMAMMXSXSXXMMAXXSMSMSSMAMAXXAXAAXMSMSMSMMSSMAM\nMAMXAXXXAAAAAMMMSSMMMMMAMXXSXMMSSXSAMXAMMMMSSSMMMAASASMXSAMAMXAMMMMXAXAMXSXAAMXMMSMMSSMMASXAXXAXMSMAMXMXAXSXSXMAAAAAMAMMMXMSSMMXMAMASAXAXAAA\nSASMMMSMMSMMMSSXMAXSAAMAMMAMAXXMAXAXMMASMSSXAXXAMAMSAMXAXASMSMMSXAXMSMXMXMMXMXAMXAXXAAXMASMAMSMMSAMASAAXMMSAMASXMMMMMXSXSXMAAXXXMAMXMXMASMXS\nSXXAXAXAXXASXAAASMMSMSSSMMASXMMSSMSXSAXMASAMXMMMSXXMAMMMXMMAAXAMMXXAXAAMXMASXMASMMMSSSMMASAAAXAXXAMSSMSXXAMAMMMAXXMASMMASAMSSMMMMSSMAXMXSAMX\nSXSMMXSSMSAMMMSMMAMXMMAMAMASXAMMMAAAXXXXXMXSXMMAXMASAMXAAMMMMMXSASMMMMXSXAMAMSAMASAMXXAMMMXSXSMASXMAXAXMMMXAMAXSMMSASAXASMMAAAAXAAMXMASAMASM\nXXAAMXMMAMXMAMAASMMSXMXSXMASMSMAMMMSMMMXMMAMMXAMSXASAMMSXSAMXMXMASXSAXSAMXMAXMASAMASXSMMSMMMMAAAAAMMMMAXAMXSSXXMAMMMSXMXSXMSSMMMMMMAMAMAXAMX\nSMSAMASAMXASASMMMAAMXMAXAMXSXAMASAAXMAAAXMAMXMMSXMXSAMAAASXMAMSMMMXAXMAAMXMXMSAMXSAMXAMAMXAMSAMMMMMXASAMSMAMAMASAMAASAMXSAXAXAAMAASXSSSSMMSX\nSAMMSAXSAMXSXSXASMMMAMASXMXSXMXAMMSSSSMMSSMMSASMMSMSMMXSAXXXAXAAAXSMXASAMXMMMMXSMSXSSSMSSMMXMXXAAXXSXSMAAMMSASMXASMMMASASMMXSMMSMXSAAXAXMMMX\nMAMAMASAMXMXAXMASMXXASMAASXSASMMXAAMMMAAXMXAXMAXXMAMXAMXMAMSMSSXMXAXMMXXMAXAMXMMAMAMAAAMMXMAMMMXMXAMXMMSXSMMAMXSXMMMMAMASXMMAMAXAXMMMMAMMAMX\nSAMAMMSXAAMMXMMMMMMSMSMSXSASAMASMMMSASMSMSMMXSSSSMMMMMXAMXXAXXAASXMXSAMASMSSMSMMSMAMXMASMASXSASAAMSMSXAMXSAMXMXMASASMSMMMAMMMSXSMMMXAAAASASA\nSXSSSMMMSAMXASXAAAAAASXMASAMAMAMASAMXSAAAAASAMAAAAXMAMMSMMSMXMSMMAXAMASAMMAMXAAXXXXSXSAAXXSAXASMXMAAMMSSMMASMMMSMMAXSAAAXAMSMMAMMAXMAXMXSASM\nXXAMXAAAAAMSMSSSMSXMXMAMAMASXMXSAMASXMXMSMAMMSMSMMSMXSAXAMXSAMASMXMMSAMMSMAMMMMMMSXMAMSSXXMAMXXMASMSMAXAASAMAAAAXMXMXSSMSMSMAMMMSMSAXXSAMAMX\nSMSSSSSSMAMAAMAXAMXSAMAMXSXMAMAMMSMMMSAMXXSXXSAMXMAAAMASMMASXSASMAAAMAXSAMMSXMAMAAAMXMMMXAMXMSASAMXXMXSAMMMSSMSSSMAMMMXMAXAMSMSMXMMMASMASXMS\nXAXAAXMAXAXMMMAMXMASAXXXMXAMXMMSASAAASASAAXXSMMMSSMSMAAMAMASXMXMMXMAMXMMASAAASAMXSSMAMAAAXXAAXAMXSAMXXMASMAAMAAXAXXXASASMXMMMAMAMXMAMASMMMMX\nMSMMMMSMMMSSSMXSAMXMAAMSSSXSASXMAXSMMXXMASMMXAAAXAXAXMXSXSXMXXXAAXAMSMSMSMMMXSAXAXMAMSMMSMSASMAMAMXSSMMAMXMASMMSSMSMAMMMXXMAMSMSSMSXXMAXAAMX\nMAMXAAXXMSAAXAXSXSAMXSAAMAAXASMMMMMMXSSXXAAXASMSSMMAXXMMASAXXMMSMMMXAAAXAAXXAXAMSSXSXSAMXAMAXXSMASASASMXSXXXXAXXAAAMXMSMSASXSAAAAAAASXSMXMXM\nSAMXMMSAMMMXMMMMMSXSAMMXMMMMSMXAMAXSAXMASXSXMMAXXXMSXXASAMAMXXAAAAAMMSMXSXMMMXAMXAXMMSAMMSMAMMXSASMSAMXMAXMMSMMSMSMSAAAAXMASMMSMMMXSAAMASXSM\nMASXAMMAXXXXAAAMAMAMXMAMXAAXMASMSSXMXSXXMXMAMXXMSXMAASMMXSAXXMSSSMSXXAAAMXMASXSXMMXMAXMMSAMXXXAMXSAMXMMXMASAAAXMAMASXMMXMXMAXXAXXXXXMAMASAAX\nSAMXMXSMMMXXXMXMASXMSMSMSSSSMXMAAMXSAMXSMXSAMXAMXAMMMMXAXSAMXXMAXAXMMMMMXAMASAXXXXAMMSSMSMSMMSMSAMXMSXMASMMXXSMXAMAMMXSSMAMMSSMSSXMXMMSAMXMM\nMXSXXAXAAAXMSSXMXSAASAMXAXMXMSMMMSMSAMASXAMASXAXSSMSXMMSMMMMMXMXMXAXXXAMAXMASMMMMSXSXAXASXSAAXMMXSSSMAXAAMASMXMMMSXSXAAXSASXAXMAMMAXXAMAMXSM\nASXMMSXSMSASAAASMMMMMAMMSSMAMMXXAAMXMMASMMSAMXMMMAAXMAAXAMASXSAXMMSMMSASMXMAXXAAXMAMMMMMMASMMXSXMAXAASMSSMAXXAMAMXAXMMMXMMSMXSMAXSXSMSSSMASX\nXMAMXMAXAMMMMSMMAAXAXXMXMMXAMXXMSMSSSMASAMMMMXMASAMMAMMSMSAXSAMXXAAAXAXAXAMXSSSSSXMSMMMXMAMAAASAMXSSMMAXXMASMMMSSMMMXXSMSMXMASMMXMAMAAAAMXMM\nSSMMAMSMMMAAXMMMMSSMSMSSSSSMSXMAMXAAXMXSMXSSSMMAXAMXXAAMAMXSXMAMMSSSMMMMSMSMAAXXMMMAAASAMXSXMXSAMMXMAMXMXMAXAAAAAAXAXXMXAAXMASAMAMAMAMSMSASX\nXAMMXMAAASXSSMASAAAXAAXAAMAAMMASXMMSMXMSAXAAAXMSMMMSMSAMXMSAXXSXAAXAAXAXAAAMXMXMMAXSXMMAXXSMSASXMMAXMMMSAMXSMMMSSMMSMASMMMXSMSMMMXAXXXAMXASX\nSMMASXXXMAAMXXAMMMMMMSMMMMMMMASXSMAAAXAMXMMSMMXAASAMAASXAMSMSMAMMSSSMSSSMXMXMXXMASXMASXSMAXAXXSXSMMMXAXMAMASMAXXMMAMXMSAAAXXAMASXSMSMMMSMMMX\nXAMASMSMMMXMAMMXSAMSXXAXXXMXMSAMAMMMXAMXXMXAXAMSXMASMMXSMAXXAMMAMAAAAXMXMASMSAXXXXASAMAXMSMSMASAMASMSSMSAMAMXXMAAMASMXSMMMSMAMXMAAAAAXAAAAXM\nSSMMMAAXMXAMXMXAMAXSASXSSMMAXMASMMMAMSSMXSXSXXAMXSAMXXXAMAMSMSXSMMSMSMSASASAMASMMMMMXMMMXXAMMAMAMAMAAAAXXMMMSMSXMXAMAMMMSAXXXMXMXMSSSMXMXMMX\nAAAMMSMSSSMSAMMMSAMMAMAXMASXXSMMXASMXAAMASMAMSSXMSAMMSMXAAMAXSAXXAAXXASASAMXMXMXAAXMAMXMMMSMMXSXMASMMMMXSAAASXSMSMMSSXMASAXXMMAAMXMAAAXSSSMS\nSSMMAXXAXAXSMSMMSXSMAMXMXMMMXAXMSASXMSSMASMAMXMAMSAMMAAASMSMMXXSMXSXMAMMMXMXXXXSXMMSAXAAAXAXMAMAMASXXMXMMAMXXASASXMAXAMASMSAASASMAMSMMMAAAXA\nMAMMXSMXSMMMXMMAMXSAMSXSXMAAMMSMAXMAXXXMASXMXSAMXSAMSMSMXXAXSSMXMAMXMSAMXMMMMMMSAMXSMSSSSSSSMXMAMMSXMXAXXXMSXAMMMAMASASAMAAMXMAMXAMAASAMSMMM\nMAMXAAAMSASXAXMMMAMSMMAMAMMSMAAXMAXMMAXMASAMASAMXMAXAAXMXSMSMMAAMASAXXAXXAAAAAASMMXSAAAAAAMAAAXAXXXMMSMXXAAXMMMXSMMMMMMAMAMXXMMMSMSSSMSXXAMX\nMSMMASXXSAMMMMMMMXSAMXAMAMXAMSSSMSSMSXXMASAMMSAMMXSSSXXMAMXMXASASAMAMMMMSSSSSMMSXMXMAMMMMMMMXMASMMAAXAAASMSMAAAXMASAAXSXMSXXSSSMAXAXMAMXMASA\nAAAXXMAXMSMAMASAMXAMSSSSXXSXMAAAXAAXSAMMASAMXSXMMSMAMSXMMXAMXXXAMXSAXAAAMXMXAXAXAXAXXMXMAMAXXXAXAMXSSMSMAAAXXXSMMAMXSMMASAMSMAASMMMSMAMAXAMA\nSSMMMAMXXAXXSASAXMMXAAXMAXMMMMSMMMSXXAMAXSMSAMAXXAMAMXSXSSMSAMMAMASXXXMMSAMMSMSXMMSMMMXSXSXXXMAXASXMXMAXMSMSASAXMASMMASMMSXAMSMMXAXAMMSSMMSS\nXAXAXSXMSMSXMASMMSXMMSMMMSMAAXAAXXMAMSMXXSMMASAMSXMASMMMAAAXAXSXMXMMMSAAMAMAXMXAAAXAAMASMAXSSMSSMMXMASMSMAXSMMAXSXMAXMMXAMSMXMXXXMSSSXAXAXAX\nXAMXMXAMXXAAMXMXAAAXMAMAAXXXSSMSXMAMXAAXAMASXMAMAASASAAXMSMMMMMXMAAAAXMXMSMMSASMMMSSMSASMAMXAAAXASMSAMXAXMXMXMAMXMMSMASMSMAMAMSMSMAMMMMSAMXS\nXSMSSSSMSXSSXSAMMSXMXAMASXXSAMMAASAMMMMAASAMXSXMMXMASXMSXAAASAMAMXMMSSSMAMAMMAMXAXXXAMAXMASMMMMSMMAMASXXMSAMXXXMAMAMMMMAXSMSMSMAAMAMAAXAXMXA\nAMAMAXMASAAXAMAMXMMMSMXAMAXMASXSMMAXSAMSXMAXXMMMMSMAMASXXMSMSASMXXASAAAMAMAMXMMSSMMSXMMMSMSXMAXXAMXMMSAMXSMSSSSSSSMSAXMSMXXXXMMSMSMSXXMMXMMA\nMMAMMMXAMMMMXMASMAAMAMMSMMMMAMAMASAMSAAAAMSMSMMSAMMSSMSASXMMSAMAAASMMSMMSMMMXXAXAAASAAXAXXSASMSSXMSMMMAXMXXAAXAAAAASAXMAMMMSSMAMXAAXXSSXMSAS\nXSXSXMMSXAXXXMAMMSMSMMMAAXSMSMXSAMAXSMMSSMXAAAAMASAAAXMAMMMAMSMMMMXAXMXMXASAMMSSSMMSSMMMXASAMAXXXXAXASMMSMMMSMMMMMMMAXMASAAAXMAMXMSAMXAAAAMM\nMAMXAXAXSSSSMMAMXMAMMASMSMAAAXXMMMXMXSAMAAMAMMMSMMMXXAMXMAMASXXXXXMSMXMMXAMASAAAXXMXMMASAXMAMXMMSSMSXMMAAAMAAAAXASAMXASASMSSSMASAMXAMSMMMMXS\nSAMSSMSXAXXAXSASAAMXSMSAMAMMMMMASAXMAMSSMMMMXMXSXMSSMSXMSSSMSXSMAXAAMXAAMSMMMMSAMXSSMMAXMMSXMXAAAAASXMMSXSMMMSMSASXSMMMASAAAXXASMSMMXSAMXXAX\nXAMAXAXMMMSSMSASXSXAMXMAXXXAMXSAMMMMAMMMXSAMMMAXAXAMXAAXAAAASAXSXMSASXSMMMAAXXXAMXSAMMSSXXXMSXMXMMXMASXAAXASAXAMXMXMAXMAMMMSAMXMXAAXAMMMMMMM\nSSMMASMMMAMXAMAMXXMAMAMSMXMXXXMASXAXXMXAASASAMSSMMSSMSSMMSMMMMMAXAMASMXAXMMMMASAMXSAMAMAXXSASXSSSMASMMMSXSAMMMAXXMMSAMMASXAXMSMMSASMMXAAMMSA\nMXAMAMAXMMMMSMAMXSAMXSXMAMSMMMSAMXMMSAMMMXAXMXMAXAMAXAXMAMMMAAXMASMXMAMMMXXAMMSAMXSMMAMMXMMAMXXAASXSXXXXAMXMMSSMMSAMXSMMSAMXAAXAMXXASXSXSAMM\nSSMMAMAMMSAAMSMSAXSXMXAMSMAAAAAASAMAXXXSAMSMMSMSMSXMMSMSAMMSSSSXSMSSMSAXMASAXAXAMXMASAASAMMAMXMSMMMXMASMAMAMAAMAMMMXMSAXSAMMSXSMMASMMAAAMMMX\nMXASXSSMAMMSMAMMMSMSASAMXSSSMSSMSAMXSXXMAXXASAAMMXAXXAASXSAMAMXXMAMXAMMSXXAMMXMAMXMMMMXXAXSSSSMAXAAAXAXAXMSMMMSAMMSAASMMSAXMAXAXMAXXMMMMMMXX\nSXMMMAMMXSAXMASAMAAAMXAMAXXAMXXMSXMMMMASMMSSMMSMASAMXAMSAMMSAMXSMSMSAXAMXMASAXSXMMXAAMSSSMAMAAXSSXSMSSSSMAXMMMSXSAMMXMMAXAMXMMMSMSMSXSXMAMAM\nXASMMMSAMMMMXASASMSMXXAMMSSXMASMSMSAAXAXAAXAXXXMXMAMSMXSAMXSASXXAAAMMMMMMMAMMMMAAMSSXSAAAMMMMMMXAMXAXMAAMXMASAMXMXSSSSMSSSMSXSXAAAXSASXSASAA\nXSMAASMMSAMAMMSAMAMAMSSMAAXMMMMAMASXSSSSMXSMMMMSASAMAMXSMMXXAMXMSMAMAAAXAMAMSASMSMMAMMMSMMXMAAXMASMMMMSMMASXMASXSAXMAXAXAAAAASAMXMXMAMASXSAS\nSXSMMSAASASMAXMAMAMAMAMXMXSMASMAMMMSXXXAMMAXAXAMASXXASMMASAMSMSMMXSSSSSSXSXSXXXMAXMAMSMAXMAXSXMMAMAXXMAXSXMXMAMMMXMMMMSMSMMMMMMXAXAMAMMMXMAM\nAAXMAXMMSXMXXXXAMXMXMMSAMMMMASXSMXMXMSXXMAASXSSMMMMSASXSAMAXMASAMMMAAAAAASMXMMMSAMXXSXSAXMMMXAAMSSMMMSMMMMSSMAMMMMSMMAAAXAMXAAXSMSMSMSXSXMAM\nMAMXMXSAMASAXSSSMMSMAMSXSAAMMSAMXAMAMASXXSMMAXAXAAXMMMMMXSMMMMMAMAMMMMMMAMMAXAAMAMMSMMMMSMSAMMMMXAXMAAMAAAAMXAMAAAAAMSSSMSMSSSXMXAMAXXAMSMAS\nMAMAMSMAXAMMMMAAXAAMXMMMXMMSAMAMSMXSAMAMMXAMXMXSMSMXSMSAMXAXMXSXMMSAMXAMAMXMMMXSAMXAAAXAAAMMXASXSAMMSMSMMMSXSSSSMSSSMMXXAAAXAMXXMSSSSMXMASAS\nSASASXSAMXMSAMAMMSXSASASMSAMXSMMXSAMMXMSSSMSSXMAXXASAAXAAMXMAMMAAAXASXXSXMASASXSXXXSSMSMMSMSSMSXMASXMASXMAMXAMAMAAAMMSXMSMMMMMXSAXAXMASXXMXS\nSAXMSXMXSAASMSMSXXAXXXASAMXXXMXSAMXMXAXAAAAMXSSSSSSSMMSXMSMSMSSMMMMXMMMMMSMSAMASXMXMMMSAAAAXAAMXSAMAMMMAMASMSMAMMMSMASAMXSAAAAAMXMMMSMASXMMM\nMSMXXAXAXMMMAAAMXMMMSMMMXMSMXSAMXAAMSMMMSMMMAXXAAXAMXXMXXXAAAMXAAMMMXAAXAAXMAMSMMSAAAAMAMSSXMMMAMSMXMASXMXSAASASAAXMMMXMAMXSMMXMMAXAAXAXMXAS\nAAMXMMMSSSXMSMSMMMAAAAAMAAMAXAXSSMMXAAXAAMMMSSMMMMMMMAXSMMSMSMSMMSAASXSSSSSMAMXAASXSMSSMMAAASAMXSXMASASASAMMMSXSMSXSAMXMSSXXMMSAMSMSSMMSASMS\nSMSAMXAAAAMMMXMXXMMMMSMSMMMAMMXXXASMSMMSMMMAMAXSXMXMSMXAAAAMXAXXASMMMMAXXAAXMAMMMSAMAXXMMXSMMAXSAXMAMXSXMASAMXXSAMAMMSAAAMMSAASAMXAMXMAAMAMX\nXXSASMMSSMMAXMASMSMXAMAXAXSAMXAMMMMAXMAAAAMASXMMXSAMAMMMMMSSMXMMMXMMSMSMMXAMXAAAAMAMSMAXMAXASMMMAMMASXMXSAMXMXMSAMSMASMMMMAMMMSAMMSMMXXSSSXS\nMASXMAMAMXSASXXAAAAMSMSMMMXAMXAXSAASMMSSSMSASAMXASXSASASAMXAXAMSMMSASXMASAMXSMSMXSXMASMMMMXMXAXMAMSASASASXSXSAASMMXMAXXAXXSXSXSAMXMASXAMAMMM\nMAMASXMAXAMXAMXMMMSMMAXAMAMXMSXMSAXMAXAMXXMXMXMMMSASASAMASMSMMMSAXMASASAMSAMXMAMXMASMXMXAMMXSAMSMXMXSXMAMAAASMMMAXSMXSMAMXMAMMSMMMXMMMMMAMXM\nMSSXMAMMMSSMMXAXAAXAMXSXMAXSAXAXXMMSMMSSMSXXMASXMXAMMMXSAMXAXSAMMMMAMMMAMAXMASASAAXXXMASAMAMMMMXMAMMMMMSMAMXMAASMMSMMAMASMMAMXXAAAASAMXSXMAS\nMAMMSSMXAAAAXMSMMXSAMXMAMAXMMSMMAAAXAAMAXXAASAMXXMXMAXMAXXMMSMAXSAMAMXSMXMASASXSMSMXSAMXSMSXSASXSAMAXAAMAMXXXSMSXXXSAAXMXAXXSSSSMSXXASXMXSMX\nMXSAAAAMMSSMMAMXXXAMSMSAMSMSAMXSSMXSMMSSMMSMMASXXXSSXSMMXMAMAXAMAMSAXXAAASAMASXSXAAMASAAXXMASASASXSSSMSSMSMSXAAXXMASXSMSMSMXMMXAAMMSXMAMASAS\nSAMMSSMXMAXAXSXAMXMMAMMXXXASXSXXAMMXAXXAXXMXSXMXSMAXSMXAASMMSXMSMASASAMSMXAMSMAXSXXXAXMSSMMMMXMAMAAASAMXAAASAMMMAMXMAMASAXXAMSXMMXMASMXMASMA\nMASAMXMXMASXMXMASAXSASMSSMXMAMXSAMSMMMXXXMMASAMXMAAMASMSMMAXAAMMXMMMMMXMXXSMMMXMAMMMMSAAMAMXSMMSMXMSMSMMXMSMAXAXXXAMMMAMMSAMXXXMXXMAMXXMMSXM\nSAMASXXMAXSXMMAXXMMSASAMXAAMAMMMXMXAAAMMMSMASASMMSXSAMXXASXMSSMSAXMMAXAXMAMAMASXXXAAAMMMMAMMXAMXMMXMAMXXMSAXSMMMSSMSSMASXMXMAXMMXMASXXSXMMMX\nMASAMMASMXSAAASMMMAMXMMMMSXSASXMSASMMSAAAXMASXAAAMAMAMSXMXSAAAXSAMXSSSMSXAMAMAMMMSMMSXXXSMSASXMAAMAMMMSMMSAMMAAAMAXAASASAMSMSMSAMXAMMMXXXAAX\nSMMMXSXMMASXMMMAMMAXAMMXAXASMSAXMASAAXXAMXSMSMMSXMASAMXAMAXMSSMMASXMAMMMMMMAMASAAAMAXXMXAMXXMMSSMSMSAAXSAMXMSXMMSMMSXMMSAMAAAAXXAMASXAAMSMSM\nMXAMMSSMMASAXAMAMMASXSAASXMMASXXMAMMMMXMXXSAMXXMASAXMXMAMXMAMXAMAMAXMASAASXMSASMSXMASASXXXXMMMAXMAXXMSSMSSSMSAMAAXAMXMASMSMSMSMAAMMMMMMXSAAA\nSMMSAXASAAXAMXSSMXMAMXMSMASMAMMMSMSAMXMMMMMMMMASMMMSAMSSMSAMXSSMASMMXMSMMSAAMASMMXMXSAMMMMMSAMXSMSSSSMAMMSXASAMSXMXSSMAXXAMXAMASXMSMSXSAMSMS\nAAMMMSMMMSSMSAMXAMXMASMAXXMMMXXAAXMASAAAASASAXMAMAAMAMAAASXMMAMMXMAMAMXMXSXMSAMAAAMMMXMAXAASMSMSAAAMMMAMXXMMMXMXASAMAMASMSSMXMAMXMMAXAMMMAMA\nSMMAAAAAAMAMXXXAXMAXXAXMXSXXSAMXSXMASXMMMSASXMXAMMSXSMSMMMAMXMSXSSMMAMMSAMAMMASMMXSAMXSSMMXXXAAMMMSMXXSXMMMSAMMXSMASAMXXAMMXMMAMSMMMMXMXSASX\nXAXMSMXMMSAMMMSMSSMSSMASAXXXMASXAXSASAMSAMMMMXSXMAMMAAAMASAMXXAAXAMSAMAAMSAMSXMASAXMAXAMXMASMMSMSAMXMMMASAASASMXXMXMASMMSMXAMMMXSAAMSMSAXMMM\nSXMMMMSAMSASAAAXAAAAASAMASXMSAMMAMMASAXMAMMAAMMAMAMXMSMSAMMXMMMSMMMSASMMXMAMXASAMMSMMXSMXSAMXAAXMASXMASMMSXSAMXMMXMAXMXAMASXSASXSXMSMAMMXSAM\nMMXXAXMAMSASMSSSSSMSXSMSMMXMAASXMMMAMXMSAMSMMSSSMMMXXAAMXSSSMAAAAAAMAMXXSSSMSXMASXAXSAMXAMMMSSXXAMXMMXXSAXMMMMMXSASAMXMSMAAASASMXXMAMMMAAMAS\nXXAMMMMAMXXXAAAMAXAXXMASXAXSXXMXAAMSSXAAAXAAAXXMASAMXMXMASAASMSSSMXMSMMAAAXASMSSMXASMMMMMSAXXXMSMMAXXASMMXMAAAXASAMXAXSAMXSMMXMXSMSSSMMMMSAM\nMMXMAMSMSXMMMMSMMMSMSMMMMSMSMSMSMMMASMSSSMMMMSASAMASAMSSSMSMMXAMMMXXAAMSMSMMMMXXAXMAAAAAMAMMMXAAAMXSSMMXAASMSMSAMAMASMSAMMAXAASMMAAAAMXAXMXM\nSMAMAXAAMAAMAAAAXAMAMXAAAXAMAAAMASMMXXAMMAXAMSAMASAAASAMXAAXSAMXAAMXMMMAMAXMXMAMXMAXSMSXSASAAXSXSAMXMAAMSXSAAAMXMXMMMASAMAMASXSAMMMSMMMMMXAM\nAAMSSSMSSXSSMSSSMSMAMSSSSMAMSMSMAMAXSMSSXSMMMMXMAMMSSMXSMSMXAMXSMSXSAAMASMXMAMASXSSXMAXXSAXMSMAAMMAASMMXMAMMMMMMSMSXMMMAMMXXMASMMXAXAMSSSSSS\nMXXAXSXXAAXXMAXMAAMXMMXMXMSMXAXMAXXMAAMXMXASXSAMASXXXAXXMXMSMMMXAAAMSMSXXXASXSMSAAXSSXSMMSMAAAMXXXSXSMSXSAAMASAAAAAXAXSXXXSAMXSXSMMMAMAAAAAS\nXMMSSMSMMMMASXSMSMSSXSMMAXXASXMMSASAMXMAXXAMASASASMSMSMXMAMAAMMMMMSMXMAXXMAXAAXMMMMXSASXAXMMMXAMMMMAMAMAAMMSASMSMMMAMMXMXMSXMASASASMSMMMMMMM\nMXAXMAXXMASXMASAAAXXAMMMXMMXMAMAAXSSSMSSSMAMXMAMAXAMAAXMXASMSMAAXAXMXSAMMMSMSMMXMASAMXMMMSMSXAXAAAMAMAMXMAAMMSAAAAXAMMAMAMXASMMMMMMAAXMASMXM\nAMSSMSMSSMSAMAMSMSMMXMASMMSMSMMASMMASAAAAMMMAMXMSMMMSMMSSMSAXMSMSMXSAMASXAAXAAMXMAMASXMXAAAAMAMXSMSMSAMXMMSSMMMXSMXXAXAMAMMXAXAAAXMSMMMAXAAX\nSAMXAAAAMXMXMXMXXXXMMMASAAAAASXAMAMAMSMSMMMSASMAMAAAXMAXAXMMMAXAAAAMASAMMSSSSSSMMXMXMXXASMSMMASAAASMSAMXAXXAXAMMMASXSSMSASMSMSXSSSMAMAMMSSSS\nMAAMMMSMSMSMMMMAMXMMAMASMMMXMSMSXMMXMAXAXMXMAXMASXMMSAMMAMMSMAMSMMMSXMAXXXAAAAAMMAMXMSXAMXMASASMMMSASAMSSMSMMSSXMAMAAAASAAAAXAXMXMMXMASXAAAM\nSSMMSXAXAAAASAMAAAASASAMAXSXXXAXXSAMXMSMSMAMSMMMSAAXMASMSAXAMXMAAMASXSAMMSMMMMMAMASAAMMMMMSAMASXSAMAMAMAAXXXMMXMMMMMMMMMAMXMSMMSAMSXSASMMMMA\nXAXSASMSMSMMSAXASMMAMMXSAASXMMSSMMASXXSAAXSXXMSAXMMMMAMAXSSMSSSSSMASAMASAAAAXXSMSAMMXMSMAAMMSMMAMASXSMMXSMSXXXSAASASXXAXMASXAAAAAMAAMAMAXMXM\nMMXSMMXAAXMASXMXXMXAXAXMMMMAMXAXAAAXAXMXMXXAMAMMSSMMMASASXMXMAMAMMMXXSAMMSSMSXXXAMSSMMAMMXMAAAMXMASXAXAXAMXSAASXXSAXMMASXMASMSMSMMXSMAMSXMSS\nSXAMXMSMMMSMMMMSAXXMMMXXAASMMMMSSMMSMMMSMSSXMAMXAAAAXAMXSAMXMMMAMMMMXMXMXXAMXMMMMXAAASMXSAMSXSMSMASMMMXMAMAAMAMAXMXMSSMSXMXMMMXAMXAXMXSXAAAM\nAAMSAMASAAAXMAMSAMXSAMSSSMMAAXMAXXMAXAXAAAAASXMMSXMMMMSMXAMXMASASAAXSASMMSAMXAASXMSSMMAAMMXMAAXXMAXAASMMSMSSMAMSMSAMMAAXXMASASMMSMXSXXMAMMAS\nMSMMMSASMSMXSSXXXMAMASAAMXXXMXMXSMSXSMSMMMMMMAXXXASXXAAAXSSXSASMSXSSMAMAASMMMSMXMAMAMMMMMSAMAMMXMAXSASAAXAMXXMAXASXXXMMMASASXMAMMMMXXAMXXXAX\nSAMXAMASXAAASXMASMSXMMMSMSMMSAMXSXSXSMAXSSXMSMSAXMMAMSXSXMAMMMSASMMXMMMMMMXSAAXMAMSAMSMMXMXXAXAXMAXMASMMMAMXSMMMXMMSSSXSXMXSMMMMAAAAAMSASMMS\nSXMMMMASXMSMSAMASXXAMAMAASAASASASAMASMMMAMAMAMXMXXAMXXXMXMAMSAMXMASMMAAAXAAMXSMMMXMMMAAAXMASMSSMMMSMAMAXSXMAXXMXSAXAAMMMAMASAASMSASXSASAMXSM\nMMSMSMASXMXXXAMAMASXMASMSSMMSAMXMAMAMAMAAMAMAXSXXMAXASMMXSAMSXSXXXMAXSMSMMSSMMMXMAAAXSSMXMASAAMXXMAXMMMMMAMMSASAAXMMSMAXAMASMMSAXXMAMAMXMMAX\nAMAAXMXMMXMASMMXSAXAXAMMAMXAMXMXMSMMSAMXMSSSMXSAASXMXSAAAXAMSAMMSMSSMMAMAMAXAAAAMMMMMXAMMMASMAMMXMSMSMSASXMAMMMMSXAXXXSSSMASAXMAMAMMMXMASXMX\nXSMSMSAAMSMAMAAXMASMMSSMAMAMSAMXAMAXMXSXAAAAMAMAMASXXXMMSMMMMAMAAXAMAMAMSXMXSMSSSSXSXXAMXMASXMMXSSMAAASAMMMMXXAMXMSXMAMAAMAXMMMAMAMXSXSASASX\nASAMASMMMAMASXMXAAAAAXAMSSSMMAXXMMAMAASMMMSMMASAMMMMSMSXXASMSMMSSSMMMSAMXASAMAMAAAASAMSMSSMMAXAMXAMMMMMXMASAMSXSXAXMASMSMMSSMMXXSASAMAMXSASM\nMMAMMMSSSMSASMMXMXSMMSSMMAAMSMMSMSMMMAMAXAAASXSMSXAAMXMASAMAAAMAMAXMASMMSAMXMAMMMMMMAMAAXMASMMSMSMMAXAXASMMXMXAMMSMSMMXXAAAMAXSASASAMXMXMAMA\nXSXMXAAXAAMAMMSASXXAAAAAMSMMAAXAASMMXASMMMXXMAMXXMMMSAMXMAMSSSMXMXMMAMAMAAMXSMSXXAXMXMMSMMMMMAAASXSMSMMMSXXXSMXMAMMSAMAXMMMMAMMAMASAMXSSMAMS\nXMAMMMMMMXMSMXMASXMMMMSMMAMSXSMMSMASXMSASMSSMAMMMSAASAMXSXMAMAMSSSXMASMAMXXAAXAMSMXMAXAXMMAAMMMSMAXXAAASMMSAAASXXSAMAMXMXASMSMMAMASAMXAAMMSM\nXXAMXAXSAMXAMMMSMXMAMXMAXAMMMMMXMMMMAAMAMAAXSMSMAMMXXAMXMAMASAMXAMSSXSXMXMMSSMMMAAASAMXSXMXSSMMXMMMSMSMSAASXMMMAAMASAMXSMASAAXSXMXSXMASXMSMM\nMMSXMASXASXMSAMAAXSAMSMSSSSSXMASMASXSMMMMMXMMSXMMXXSXSMAMAMMSMMMAMASAMXXAXMAXAAXMXMSAMXXAMSMXXXMASAMXXMMXMSAMXMMMMXMASAMMAMMMXMAMAMXXMASMAAA\nAXAAMSMMMMAAMAMMXMAAXAAMAXAXAAAMMXSAAMAAAMXMXAMMSMMXAMSMSXSMMASMXMASXSMSSSMSSXMSSMXSAMSMSMAASMSSXMAXAXXSMXSXMAMAAXXSXMXSMXSXSASAMMSMMXMAXMMM\nSMMSMAAXXSXMMSMMASMMSMSMXMASXMASXSMMMSSSXSAMSMXAAAXMXMAXAASASAXXMMASAMAAAAAMAAMAMSAMMMSAAMMSMAAMMXMMMSMMMXXSSXSSXSAMXMMSAMXASXXAXAAASAMMSSXX\nXAXXMSSMMMASAXASASXAAMXXXAXMASXXXAAAXAAXAMMXAAMSXSMAASMMMSMAMXSAMXAMAMMMSMMMSMMASMXXSAMXMSMAMXAAAASAMXAAMMMXXXAXASXSXMAMAXMMMMMMMSSXSASAAXXA\nMMMXMXXAAMXMASAMAXMXSMMSSMXXAMMSSSMMSMXMSMMSMSMMAMMSMSAASMMSMASAXAMSXMAMAMXXAAXSMMAAMMMAMAXXSMSMSMMAXXMMSASMMAMMAMXXAMSSSMXMASAMAMMMMMMMMSSX\nMAAAMMSMMMAMAMXMSMMAXAXAAAMMMSAAMXAXAMAMXMAAMAMXAXAAXXMMSAAXMXSXMXXXASMSSSMMSSMAAMSSSSSSSSSXSAMAMXSMMASASMSAMXXMAMXSAMXAMMASASAMMMASMSMXSAXS\nSASXSAMAASAMSXMAXAXASAMSSMAAAMMSSSMMASASAMSXSASMSMSMSMSMMMMSMMMXAXMSAMAAAXAXAMXSXMXAMAAAAASAMXMMXMASMMMASMSMMMXXXSAMSAMXMSASXXXMXSAMAAAMMSMA\nAAMMMASAMSASMAMSSMMMMMAMAMSSXSAAXAASXMAMXMAXMASXMAXAMAXXASAMXXAAXMXAAMMMSXXMASAXASMAMMMMMMMXMMMMMAAASXMAMASASAMSXMASAMXAMMMXAXSAMAXMSMMMAXXS\nMXMXSAMXXXMAMAMXAXSAAMSSSMAMXMMSMSMMSMXMSMMMSAMAMSMSMAMXAMXSAMXSMSMSSMXAMMSSMMASAXXXMASXXASMAMASMMSAMXMAXXSAMSAAXSXMMXSXMASMAMMAMAXXXAMMASMA\nSMMXMASXSSMASXSSMMXXMSAAAMSSSXXAAMXMAMAMXAAAMASXMXAXMAMXAXAMMAAXAAAXAMXXAAAAAXAMXMMSXMMSAMXAASMSAAXAMAMMXMMXMMSMMMMMMAMASASMMXSMMMMAMMMMAXAM\nAXXAXAXAMASASAMXMAXSSMMSMMMAMAMMXMAMMSSSSXMMSMMMAMXMSASMMMMSMSSSSMSMSXMMMMSSMMXSXAXMASAMMMMXMXMMMMSSMSASASXSAXXXMXAAMXSAMMSAXAXXAXMASASMSSSX\nMSXMXXSASAMXSAMXXAXMAMMAAAMAMMMSMSSMXMAAMMXAXAAAXMXAMMXXAAAAAXAAAAXMMAXXAAMAMSMMMSAMSMXXAAMMXSAXAAAAAXASASASXMXMMMSSSXMMXXXMMMSMXXSASXSAAAMA\nXMASAMSAMMXAMAMXMMXMAMSMSXSAXXAXMAMXMSMAMSMMSSSMSAMXMMMMSMMMSMMMMMMSXSAMXMMAMXAAAMMXXAMMSXSAASAMSXMMMMAMAMMMAMMSAAMAXAASXSMXAMAXSMMMSAMMMSMS\nMXAMAXMAMSMMSSMMSASXMMAXMMMMMMMSMASAMMSAAMAMAAAXSMSMSAMXMMXXMASAAXXMAXMMMXMAMXMMSMSAMAMMAAMMMMAMXAXMMMXMAMASXMAXMSSMSSMMAAXXXMXXSAAAMMMXMAXA\nMMSSXMSAAXAMAAAXMASASMMSXAAAXAAAXXSASMXXMMAMMXMMMAAAMXMAASXMSSSXSSSMAMXAAAMAMXXMMAMMXMMMMMMAXSXMSMMMMMMSMSAXAMMSMAAMAMMMSMMMSAMXSXMMSMSAMXXM\nXAMAMASMSXXMXSMMMAMXAMAMMSMSXXMMSMSMMXMASMMXSAXAMXMSMXSASXMASXMAMAMMAMSSSMXAXSMSMAMXXSXAASXMXSSXAXAMXAXAAMASXSXAMSSMAMMAAAXMAXMMSXSMSAMXSAMX\nMMSMMAXXMAXSMXMAMXSAMXAMMXSXXSMXXAXAAMMASAMAMXSMSAAAAXSMMAMXMAXXMAMSXMMAAMMSMSAAXAMSXMAMMMAMMMMSMSSMSASMMMMAAXMMXXXMAMMSSSMMSMSXMASAMXMAXASM\nMAAAMXSAMMMSAMSMSAMAXSXSXXASAMMASMMMMSMASXMASXMAAMMMSMSASXMASMMXMAMMMMMMXMAXAMSMMSSMAMASMSSMAAAXMAMXAAAXASMMXMMSAMSSMSMAAMASMAXAMAMMMMMMXAMA\nMSSSMASAASXMAMMXMASAMMXXXAMMSMAASAAXSXMASASASAMAMXSXAAMAMSAMXAAXSMSAAXASMSAMXMASAXAMXAASMAASXMSSMASAMXMAMSAXASXAASAAXAXMASXMMXMMMMSAAXAAMSXS\nXXAXMASXMMMSAMXAXMAMSAMXASXSMMMSSMMMMSMASMMXSMMAXMASMSMXMXMSAMXXXASMSSMSXMASASMSXSAMXMMSMSMMXAXXXASXXMASMSXMASXSSMXSMMXXMAMXXXXXSSSMSSXXXMAX";

    public override int Year => 2024;
    public override int Day => 4;

    public override void Solve()
    {
        var lines = GetParsedData();

        Console.WriteLine("Day 4, Part One: " + SolvePartOne(lines));
        Console.WriteLine("Day 4, Part Two: " + SolvePartTwo(lines));
    }

    public int SolvePartOne(List<string> lines)
    {
        var amountOfOccurrences = 0;

        for (var lineIndex = 0; lineIndex < lines.Count; lineIndex++)
        {
            amountOfOccurrences += GetAmountOfHorizontalOccurrences(lines, lineIndex, "XMAS");
            amountOfOccurrences += GetAmountOfVerticalOccurrences(lines, lineIndex, "XMAS");
            amountOfOccurrences += GetAmountOfDiagonalOccurrences(lines, lineIndex, "XMAS");
        }

        return amountOfOccurrences;
    }

    public int SolvePartTwo(List<string> lines)
    {
        var diagonalOccurrences = new List<(int, int, string)>();

        for (var lineIndex = 0; lineIndex < lines.Count; lineIndex++)
        {
            diagonalOccurrences.AddRange(GetAmountOfDiagonalDownLeftOccurrences(lines, lineIndex, "MAS"));
            diagonalOccurrences.AddRange(GetAmountOfDiagonalDownRightOccurrences(lines, lineIndex, "MAS"));
            diagonalOccurrences.AddRange(GetAmountOfDiagonalUpLeftOccurrences(lines, lineIndex, "MAS"));
            diagonalOccurrences.AddRange(GetAmountOfDiagonalUpRightOccurrences(lines, lineIndex, "MAS"));
        }

        var diagonalOccurrenceWhichIsPartOfAnX = diagonalOccurrences
            .Where(occurrence => IsPartOfX(diagonalOccurrences, occurrence))
            .ToList();

        var count = diagonalOccurrenceWhichIsPartOfAnX.Count / 2;

        return count;
    }

    private bool IsPartOfX(
        List<(int LineIndex, int CharacterIndex, string Direction)> occurrences,
        (int LineIndex, int CharacterIndex, string Direction) occurrence)
    {
        if (occurrence.Direction == "↘")
        {
            // Check if ↗ is present
            var upRightOccurrence = occurrences.Any(o =>
                o.LineIndex == occurrence.LineIndex + 2 &&
                o.CharacterIndex == occurrence.CharacterIndex &&
                o.Direction == "↗");

            // Check if ↙ is present
            var downLeftOccurrence = occurrences.Any(o =>
                o.LineIndex == occurrence.LineIndex &&
                o.CharacterIndex == occurrence.CharacterIndex + 2 &&
                o.Direction == "↙");

            if (upRightOccurrence || downLeftOccurrence) return true;
        }
        else if (occurrence.Direction == "↗")
        {
            // Check if ↘ is present
            var downRightOccurrence = occurrences.Any(o =>
                o.LineIndex == occurrence.LineIndex - 2 &&
                o.CharacterIndex == occurrence.CharacterIndex &&
                o.Direction == "↘");

            // Check if ↖ is present
            var upLeftOccurrence = occurrences.Any(o =>
                o.LineIndex == occurrence.LineIndex &&
                o.CharacterIndex == occurrence.CharacterIndex + 2 &&
                o.Direction == "↖");

            if (downRightOccurrence || upLeftOccurrence) return true;
        }
        else if (occurrence.Direction == "↙")
        {
            // Check if ↖ is present
            var upLeftOccurrence = occurrences.Any(o =>
                o.LineIndex == occurrence.LineIndex + 2 &&
                o.CharacterIndex == occurrence.CharacterIndex &&
                o.Direction == "↖");

            // Check if ↘ is present
            var downRightOccurrence = occurrences.Any(o =>
                o.LineIndex == occurrence.LineIndex &&
                o.CharacterIndex == occurrence.CharacterIndex - 2 &&
                o.Direction == "↘");

            if (upLeftOccurrence || downRightOccurrence) return true;
        }
        else if (occurrence.Direction == "↖")
        {
            // Check if ↗ is present
            var upRightOccurrence = occurrences.Any(o =>
                o.LineIndex == occurrence.LineIndex &&
                o.CharacterIndex == occurrence.CharacterIndex - 2 &&
                o.Direction == "↗");

            // Check if ↙ is present
            var downLeftOccurrence = occurrences.Any(o =>
                o.LineIndex == occurrence.LineIndex - 2 &&
                o.CharacterIndex == occurrence.CharacterIndex &&
                o.Direction == "↙");

            if (upRightOccurrence || downLeftOccurrence) return true;
        }

        return false;
    }

    private int GetAmountOfDiagonalOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var amountOfDiagonalDownOccurrences = GetAmountOfDiagonalDownOccurrences(lines, lineIndex, pattern);
        var amountOfDiagonalUpOccurrences = GetAmountOfDiagonalUpOccurrences(lines, lineIndex, pattern);

        return amountOfDiagonalDownOccurrences + amountOfDiagonalUpOccurrences;
    }

    private int GetAmountOfDiagonalDownOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var amountOfDiagonalDownRightOccurrences = GetAmountOfDiagonalDownRightOccurrences(lines, lineIndex, pattern);
        var amountOfDiagonalDownLeftOccurrences = GetAmountOfDiagonalDownLeftOccurrences(lines, lineIndex, pattern);

        return amountOfDiagonalDownRightOccurrences.Count + amountOfDiagonalDownLeftOccurrences.Count;
    }

    private List<(int LineIndex, int CharacterIndex, string Direction)> GetAmountOfDiagonalDownRightOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var line = lines[lineIndex];

        var characterIndexes = Regex.Matches(line, pattern[0].ToString()).Select(match => match.Index).ToList();

        var coordinates = new List<(int LineIndex, int CharacterIndex, string Direction)>();

        foreach (var characterIndex in characterIndexes)
        {
            if (lineIndex + (pattern.Length - 1) >= lines.Count) continue;
            if (characterIndex + (pattern.Length - 1) >= line.Length) continue;

            for (var patternIndex = 0; patternIndex < pattern.Length; patternIndex++)
            {
                var character = pattern[patternIndex];
                var lineToCheck = lines[lineIndex + patternIndex];
                var characterToCheck = lineToCheck[characterIndex + patternIndex];

                if (characterToCheck != character) break;

                if (patternIndex == pattern.Length - 1)
                {
                    coordinates.Add((lineIndex, characterIndex, "↘"));
                }
            }
        }

        return coordinates;
    }

    private List<(int LineIndex, int CharacterIndex, string Direction)> GetAmountOfDiagonalDownLeftOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var line = lines[lineIndex];

        var characterIndexes = Regex.Matches(line, pattern[0].ToString()).Select(match => match.Index).ToList();

        var coordinates = new List<(int LineIndex, int CharacterIndex, string Direction)>();

        foreach (var characterIndex in characterIndexes)
        {
            if (lineIndex + (pattern.Length - 1) >= lines.Count) continue;
            if (characterIndex - (pattern.Length - 1) < 0) continue;

            for (var patternIndex = 0; patternIndex < pattern.Length; patternIndex++)
            {
                var character = pattern[patternIndex];
                var lineToCheck = lines[lineIndex + patternIndex];
                var characterToCheck = lineToCheck[characterIndex - patternIndex];

                if (characterToCheck != character) break;

                if (patternIndex == pattern.Length - 1)
                {
                    coordinates.Add((lineIndex, characterIndex, "↙"));
                }
            }
        }

        return coordinates;
    }

    private int GetAmountOfDiagonalUpOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var amountOfDiagonalUpRightOccurrences = GetAmountOfDiagonalUpRightOccurrences(lines, lineIndex, pattern);
        var amountOfDiagonalUpLeftOccurrences = GetAmountOfDiagonalUpLeftOccurrences(lines, lineIndex, pattern);

        return amountOfDiagonalUpRightOccurrences.Count + amountOfDiagonalUpLeftOccurrences.Count;
    }

    private List<(int LineIndex, int CharacterIndex, string Direction)> GetAmountOfDiagonalUpRightOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var line = lines[lineIndex];

        var characterIndexes = Regex.Matches(line, pattern[0].ToString()).Select(match => match.Index).ToList();

        var coordinates = new List<(int LineIndex, int CharacterIndex, string Direction)>();

        foreach (var characterIndex in characterIndexes)
        {
            if (lineIndex - (pattern.Length - 1) < 0) continue;
            if (characterIndex + (pattern.Length - 1) >= line.Length) continue;

            for (var patternIndex = 0; patternIndex < pattern.Length; patternIndex++)
            {
                var character = pattern[patternIndex];
                var lineToCheck = lines[lineIndex - patternIndex];
                var characterToCheck = lineToCheck[characterIndex + patternIndex];

                if (characterToCheck != character) break;

                if (patternIndex == pattern.Length - 1)
                {
                    coordinates.Add((lineIndex, characterIndex, "↗"));
                }
            }
        }

        return coordinates;
    }

    private List<(int LineIndex, int CharacterIndex, string Direction)> GetAmountOfDiagonalUpLeftOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var line = lines[lineIndex];

        var characterIndexes = Regex.Matches(line, pattern[0].ToString()).Select(match => match.Index).ToList();

        var coordinates = new List<(int LineIndex, int CharacterIndex, string Direction)>();

        foreach (var characterIndex in characterIndexes)
        {
            if (lineIndex - (pattern.Length - 1) < 0) continue;
            if (characterIndex - (pattern.Length - 1) < 0) continue;

            for (var patternIndex = 0; patternIndex < pattern.Length; patternIndex++)
            {
                var character = pattern[patternIndex];
                var lineToCheck = lines[lineIndex - patternIndex];
                var characterToCheck = lineToCheck[characterIndex - patternIndex];

                if (characterToCheck != character) break;

                if (patternIndex == pattern.Length - 1)
                {
                    coordinates.Add((lineIndex, characterIndex, "↖"));
                }
            }
        }

        return coordinates;
    }

    private int GetAmountOfVerticalOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var amountOfVerticallyDownOccurrences = GetAmountOfVerticallyDownOccurrences(lines, lineIndex, pattern);
        var amountOfVerticallyUpOccurrences = GetAmountOfVerticallyUpOccurrences(lines, lineIndex, pattern);

        return amountOfVerticallyDownOccurrences.Count + amountOfVerticallyUpOccurrences.Count;
    }

    private List<(int LineIndex, int CharacterIndex, string Direction)> GetAmountOfVerticallyDownOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var line = lines[lineIndex];

        var characterIndexes = Regex.Matches(line, pattern[0].ToString()).Select(match => match.Index).ToList();

        var coordinates = new List<(int LineIndex, int CharacterIndex, string Direction)>();

        foreach (var characterIndex in characterIndexes)
        {
            if (lineIndex + (pattern.Length - 1) >= lines.Count) continue;

            for (var patternIndex = 0; patternIndex < pattern.Length; patternIndex++)
            {
                var character = pattern[patternIndex];
                var lineToCheck = lines[lineIndex + patternIndex];
                var characterToCheck = lineToCheck[characterIndex];

                if (characterToCheck != character) break;

                if (patternIndex == pattern.Length - 1)
                {
                    coordinates.Add((lineIndex, characterIndex, "↖"));
                }
            }
        }

        return coordinates;
    }

    private List<(int LineIndex, int CharacterIndex, string Direction)> GetAmountOfVerticallyUpOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var line = lines[lineIndex];

        var characterIndexes = Regex.Matches(line, pattern[0].ToString()).Select(match => match.Index).ToList();

        var coordinates = new List<(int LineIndex, int CharacterIndex, string Direction)>();

        foreach (var characterIndex in characterIndexes)
        {
            if (lineIndex - (pattern.Length - 1) < 0) continue;

            for (var patternIndex = 0; patternIndex < pattern.Length; patternIndex++)
            {
                var character = pattern[patternIndex];
                var lineToCheck = lines[lineIndex - patternIndex];
                var characterToCheck = lineToCheck[characterIndex];

                if (characterToCheck != character) break;

                if (patternIndex == pattern.Length - 1)
                {
                    coordinates.Add((lineIndex, characterIndex, "↖"));
                }
            }
        }

        return coordinates;
    }

    private static int GetAmountOfHorizontalOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var horizontallyRightOccurrences = GetAmountOfHorizontallyRightOccurrences(lines, lineIndex, pattern);
        var horizontallyLeftOccurrences = GetAmountOfHorizontallyLeftOccurrences(lines, lineIndex, pattern);

        return horizontallyRightOccurrences.Count + horizontallyLeftOccurrences.Count;
    }

    private static List<(int LineIndex, int CharacterIndex, string Direction)> GetAmountOfHorizontallyLeftOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var line = lines[lineIndex];

        var patternAsArray = pattern.ToCharArray();
        Array.Reverse(patternAsArray);
        var invertedPattern = new string(patternAsArray);

        var matches = Regex.Matches(line, invertedPattern);

        return matches.Select(match => (lineIndex, match.Index, "←")).ToList();
    }

    private static List<(int LineIndex, int CharacterIndex, string Direction)> GetAmountOfHorizontallyRightOccurrences(List<string> lines, int lineIndex, string pattern)
    {
        var line = lines[lineIndex];

        var matches = Regex.Matches(line, pattern);

        return matches.Select(match => (lineIndex, match.Index, "→")).ToList();
    }

    private List<string> GetParsedData()
    {
        return Data.Split("\n").ToList();
    }
}